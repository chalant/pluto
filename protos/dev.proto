syntax = 'proto3';

import "google/protobuf/timestamp.proto";

import "protos/data_bundle.proto";
import "google/protobuf/empty.proto";
import "protos/data.proto";
import "protos/controller.proto";

service Dev {
    /*
    The environment is stored for the lifetime of the application.
    A strategy returned by GetStrategy cannot be modified. (It can only be ran or stopped)
    A strategy returned by ModifyStrategy returns a simulation environment. It can optionally
    be stopped if it is running in a paper env or live env.)
    This service stores timestamped version of each strategy, so that we could roll-back,
    to a previous version of an implementation.
    */
    //stores data from clients (clients specifies the object id in the metadata)
    rpc StoreData (stream Chunk) returns (google.protobuf.Empty);
    rpc GetData (DataRequest) returns (stream Chunk);
    //returns a graph as a stream of bytes, since a node can be arbitrarily big
    rpc GetGraph (google.protobuf.Empty) returns (stream Chunk);
    rpc GetSession (stream StrategyRequest) returns (stream Chunk);

    //DEVELOPMENT API
    //request a strategy deployment in a new environment (depending on the environment,
    //some external actor might need to confirm (admin, user with the right credentials...))
    //deploys a specific session.
    rpc Deploy (DeploymentRequest) returns (DeploymentReply);
    //the client also sends a name as metadata...
    rpc New (stream DomainDef) returns (stream Chunk);
    //adds a new version to the list of strategies
    rpc Modify (stream CompoundDomainDef) returns (stream Chunk);
    //pushes one or more strategies to the the hub...
    rpc Push (stream Chunk) returns (DeploymentReply);
    rpc DeploymentStatus (DeploymentStatusRequest) returns (stream DeploymentStatusReply);
    //mounts a broker to be used by the controllers. The broker is a service that must
    //implement a certain interface... Note this method cannot be called by any user.
    rpc MountBroker (BrokerID) returns (MountStatus);
    //get a list of the strategies on the current branch
    rpc List (ListRequest) returns (stream Chunk);

    //returns a list of compound domain def.
    rpc Domains (google.protobuf.Empty) returns (stream Chunk);

    //CONTROL API.
    //runs a strategies with initial parameters
    //this will pull the strategy from the store and run it.
    //can run multiple strategies at the same time...
    rpc Run(DelimitedRunParams) returns (google.protobuf.Empty);
    rpc Stop (stream StopParams) returns (StopStatus);
    rpc Watch (WatchRequest) returns (stream Chunk);

}

message WatchRequest {
    string session_id = 1;
}

message StorageRequest {

}

message DataRequest {

}

message Reply{

}

message ID {
    string id = 1;
}

message FetchRequest {

}

message DeploymentStatusRequest{

}

message ListRequest {
    string branch_id = 1;
}

message DeploymentReply {
    string controller_url = 1;
}

message DeploymentRequest {
    string strategy_id = 1;
    string dom_id = 2;
}

message DeploymentStatusReply {
    string strategy_id = 1;
    string status = 2;
}

message BrokerID {
    string name = 1;
    string url = 2;
}

message MountStatus {

}

message AdditionReply {
    /*A reply sent if the strategy addition was accepted...*/
}


message ModificationRequest {
    string strategy_id = 1;
}

message StrategyID {
    string id = 1;
}

message StrategyRequest {
    string id = 1;
}

message Filter {
    //if the field is empty, return the type is "all"
    string env_type = 1;
    string state = 2;
}

message Strategy {
    bytes strategy = 1;
    string id = 2;
}

message StrategySet {
    repeated Strategy strategies = 1;
}