syntax = 'proto3';

import "google/protobuf/empty.proto";

import "protos/data_bundle.proto";
import "protos/broker.proto";
import "protos/controller.proto";

import "google/protobuf/timestamp.proto";

import "protos/clock.proto";
import "protos/data.proto";

//TODO: State: bytes...

service Controllable {
    /*A service to be controller by a controller service*/
    //the controller calls this method to send a data bundle to the controllable
    rpc UpdateDataBundle (stream Data) returns (google.protobuf.Empty);
    rpc UpdateParameters (ParametersUpdateRequest) returns (google.protobuf.Empty);
    //called to initialize the controllable (sends initparams)
    rpc Initialize (stream Data) returns (google.protobuf.Empty);
    //TODO: should return the state of the strategy run session at each update...
    //update sends an UpdateRequest. since this could get arbitrarily big, we send it
    //in chunks of bytes.
    rpc ClockUpdate (stream Data) returns (google.protobuf.Empty);
    rpc BrokerUpdate(stream Data) returns (google.protobuf.Empty);
    //receives periodic calendar updates
    rpc UpdateCalendar (stream Data) returns (google.protobuf.Empty);
    //TODO: should return the state of the controllable after it stopped...
    rpc Stop (StopParams) returns (stream Data);
}

message InitParams {
    CompoundDomainDef domain = 1;
    bytes strategy = 2;
    float capital_ratio = 3;
}

message UpdateRequest {
    google.protobuf.Timestamp timestamp = 1;
    Event event = 2;
    BrokerState broker_state = 3;
}

message UpdateReply {

}