syntax = "proto3";

import "protos/protocol.proto";
import "protos/assets.proto";
import "protos/finance.proto";
import "protos/clock.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Broker {
    /*This is an interface that provides brokerage access to clients. It encapsulates
    methods for accessing performing trades. Each caller passes its credentials as metadata*/
    rpc PlaceOrders (stream Order) returns (stream Order);
    rpc CancelOrder (CancelRequest) returns (google.protobuf.Empty);
    rpc CancelAllOrdersForAsset (Asset) returns (WarningMessage);
    rpc ExecuteCancelPolicy(Event) returns (WarningMessage);
}


message BrokerState {
    repeated Transaction transactions = 1;
    repeated Commission commissions = 2;
    Account account = 3;
    google.protobuf.Timestamp timestamp = 4;
}

message Commission {
    Asset asset = 1;
    Order order = 2;
    float cost = 3;
}

message WarningMessage {
    string message = 1;
}

message OrderParams {
    string style = 1;
    Asset asset = 2;
    float amount = 3;
    float limit_price = 4;
    float stop_price = 5;
    float limit_order = 6;
    float exchange = 7;
    google.protobuf.Timestamp order_dt = 8;
}

message CancelRequest {
    string order_id = 1;
}

message Event {
    EventType event_type = 1;
}