syntax = 'proto3';

import "protos/data_bundle.proto";
import "google/protobuf/empty.proto";
import "protos/data.proto";

service Hub {
    /*
    The environment is stored for the lifetime of the application.
    A strategy returned by GetStrategy cannot be modified. (It can only be ran or stopped)
    A strategy returned by ModifyStrategy returns a simulation environment. It can optionally
    be stopped if it is running in a paper env or live env.)
    This service stores timestamped version of each strategy, so that we could roll-back,
    to a previous version of an implementation.
    */
    //request a strategy deployment in a new environment (depending on the environment,
    //some external actor might need to confirm (admin, user with the right credentials...))
    //deploys a specific session.
    rpc Deploy (DeploymentRequest) returns (DeploymentReply);
    //the client also sends a name as metadata...
    rpc New (StrategyRequest) returns (stream Data);
    //adds a new version to the list of strategies
    rpc Modify (stream CompoundDomainDef) returns (stream Data);
    //pushes one or more strategies to the the hub...
    rpc Push (stream Data) returns (DeploymentReply);
    rpc DeploymentStatus (DeploymentStatusRequest) returns (stream DeploymentStatusReply);
    //mounts a broker to be used by the controllers. The broker is a service that must
    //implement a certain interface... Note this method cannot be called by any user.
    rpc MountBroker (BrokerID) returns (MountStatus);
    //get a list of the strategies on the current branch
    rpc List (ListRequest) returns (stream Data);

    //returns a list of compound domain def.
    rpc Domains(google.protobuf.Empty) returns (stream Data)
    rpc GetController(ControllerRequest) returns (ControllerReply)
}

message ControllerRequest{
    string type = 1; //simulation, paper, live.
}

message ControllerReply {
    string url = 1;
}

message ID {
    string id = 1;
}

message FetchRequest {

}

//we could request strategies of all sessions (sessions.get_element('strategy')
//NOTE: only returns the latest strategy version of each session...
message NavigationRequest {
    string start_point = 1; //the point from which we start the navigation, if none, start from
    //root.
    string command = 2; //previous, next, end
    string selection = 3;
}

message DeploymentStatusRequest{

}

message ListRequest {
    string branch_id = 1;
}

message DeploymentReply {
    string controller_url = 1;
}

message DeploymentRequest {
    string strategy_id = 1;
    string dom_id = 2;
}

message DeploymentStatusReply {
    string strategy_id = 1;
    string status = 2;
}

message BrokerID {
    string name = 1;
    string url = 2;
}

message MountStatus {

}

message AdditionReply {
    /*A reply sent if the strategy addition was accepted...*/
}


message ModificationRequest {
    string strategy_id = 1;
}

message StrategyID {
    /*A strategy is identified the session_id and the environment type*/
    string id = 1;
    string env_type = 2;
}

message StrategyRequest {
    StrategyID id = 1;
    string version = 2;
}

message Filter {
    //if the field is empty, return the type is "all"
    string env_type = 1;
    string state = 2;
}

message Strategy {
    bytes strategy = 1;
    string id = 2;
}

message StrategySet {
    repeated Strategy strategies = 1;
}