syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "protos/metrics.proto";

service Controller {
    rpc Stop(StopRequest) returns (StopResponse);
    rpc Run(RunRequest) returns (RunResponse);
    //watch a particular strategy performance stream.
    rpc Watch(WatchRequest) returns (stream PerformancePacket);
}

enum SessionStatus {
    COMPLETED = 0;
    INTERRUPTED = 1;
}

message Status {
    SessionStatus session_status = 1;
}


message RunRequest {
    RunMode mode = 1; //necessary in realtime mode not in backtesting
    repeated RunParams run_params = 2;
    google.protobuf.Timestamp end = 3; //indicates the date from which we pre
}

message RunParams {
    string session_id = 1;
    float capital_ratio = 2;
    float max_leverage = 3;
}

message RunParamsList {
    repeated RunParams run_params = 1;
    google.protobuf.Timestamp timestamp = 2;
}

enum RunMode {
    PAPER = 0;
    LIVE = 1;
}

message RunResponse {
}

message StopRequest {
    string strategy_id = 1;
    bool liquidate = 2;
}

message StopResponse {
}

message WatchRequest {
    string strategy_id = 1;
}

message Performance {
    repeated PerformancePacket packets = 1;
}

message PerformancePacket {
    CumulativeMetrics cumulative_perf = 1;
    PeriodPerformance daily_perf = 2;
    PeriodPerformance minutely_perf = 3;
    CumulativeRiskMetrics cumulative_risk_metrics = 4;
    string id = 5;
}

message PeriodPerformance {
    CumulativeMetrics cumulative_metrics = 1;
    PeriodCommonMetrics period_common_metrics = 2;
}

enum ControllerEvent {
    CAPITAL_CHANGE = 0;
    LEVERAGE_CHANGE = 1;
    BROKER_UPDATE = 2;
}

message ParametersUpdateRequest {
    float capital = 1;
    float maximum_leverage = 2;
}