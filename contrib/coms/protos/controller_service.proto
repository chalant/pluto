syntax = "proto3";

import "google/protobuf/empty.proto";
import "contrib/coms/protos/metrics.proto";
import "contrib/coms/protos/data_bundle.proto";

import "contrib/control/clock.proto";

service Controller {
    rpc Register(Credentials) returns (Status);
    rpc Deploy(Strategy) returns (Status);
    rpc GetEnvironment(Domain) returns (BundleMetadata);
    rpc ReceivePerformancePacket(PerformancePacket) returns (google.protobuf.Empty);
    rpc Stop(stream ID) returns (StopStatus);
    rpc Liquidate(stream ID) returns (LiquidationStatus);
    rpc Run(RunParams) returns (google.protobuf.Empty);
    rpc StrategyList(Filter) returns (stream Metadata);
    rpc AssignCapital(stream CapitalAssignment) returns (CapitalAssignmentStatus);
    rpc Connect(ConnectionRequest) returns (ConnectionResponse);
    rpc Test(Strategy) returns (Session); // requests a test
}

message ConnectionRequest {
    string url = 1; //client url: will be used to communicate with the client.
}

message ConnectionResponse {
    string token = 2; //the client ID
}

message Session {
    string id = 1;
}

message Credentials{
    string username = 1;
    bytes password = 2;
}

enum StatusType {
    ERROR=0;
}

message Status {
    string message = 1;
}

message CapitalAssignment {
    string name = 1;
    float capital = 2;
}

message CapitalAssignmentStatus {

}

message Strategy {
    /**/
    Metadata metadata = 1;
    repeated bytes scripts = 2;
}

message Filter {
    string status = 1;
}

message Metadata {
    string name = 1;
    Domain domain = 2;
}

enum RunMode {
    SIMULATION = 0;
    PAPER = 1;
    LIVE = 2;
}

message RunParams {
    repeated string names = 1;
    RunMode mode = 2;
}


message LiquidationStatus {

}

message StopStatus {

}

message Environment {
    /*A set of modules that reflects the data structure of the data bundle*/
    repeated bytes modules = 1;
}

message StrategyEnvironment {
    /*Domain: defines the set of data on which the strategy runs. This will be used by the server to compile
    a data bundle for the strategy.*/
    string name = 1; //name of the strategy
    Domain domain = 3; //the domain on which the strategy runs
}

message ID {
    string name = 1;
}

message RegisterReply {
    string token = 1;
    string url = 2;
}

message PerformancePacket {
    CumulativeMetrics cumulative_perf = 1;
    PeriodPerformance daily_perf = 2;
    PeriodPerformance minutely_perf = 3;
    CumulativeRiskMetrics cumulative_risk_metrics = 4;
}

message PeriodPerformance {
    CumulativeMetrics cumulative_metrics = 1;
    PeriodCommonMetrics period_common_metrics = 2;
}

enum ControllerEvent {
    CAPITAL_CHANGE = 0;
    LEVERAGE_CHANGE = 1;
    BROKER_UPDATE = 2;
}


message InitialParameters {
    Frequency data_frequency = 1;
    float capital = 2;
    float maximum_leverage = 3;
    Frequency emission_rate = 4;
    string benchmark_asset = 5;
}


message ParametersUpdateMessage {
    ControllerEvent controller_event = 1;
    float capital = 2;
    float maximum_leverage = 3;
}
